name: Build Zig
run-name: Build zig ${{inputs.tag}}

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag:"
        default: "0.13.0"
        required: true

jobs:
  build:
    name: Build zig
    runs-on: ubuntu-latest
    # timeout-minutes: 600
    strategy:
      matrix:
        include:
          - target: x86_64-linux-musl
          - target: aarch64-linux-musl
      fail-fast: false
    # permissions:
    #   actions: write
    #   contents: write
    env:
      TARGET: ${{matrix.target}}
      MCPU: baseline
      ROOTDIR: ${{github.workspace}}
      ZIG_VERSION: ${{inputs.tag}}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          repository: ziglang/zig-bootstrap
          ref: ${{inputs.tag}}
          fetch-depth: 1

      # - name: Setup LLVM
      #   uses: ZhongRuoyu/setup-llvm@v0.1.1
      #   with:
      #     llvm-version: 18

      # - name: Free Disk Space (Ubuntu)
      #   uses: jlumbroso/free-disk-space@v1.3.1

      # - name: Setup Zig
      #   uses: goto-bus-stop/setup-zig@v2.2.0
      #   with:
      #     version: 0.13.0
      #     cache: true

      - name: Set TARGET_OS_AND_ABI
        run: |
          TARGET_OS_AND_ABI=${TARGET#*-} # Example: linux-gnu

          # Here we map the OS from the target triple to the value that CMake expects.
          TARGET_OS_CMAKE=${TARGET_OS_AND_ABI%-*} # Example: linux
          case $TARGET_OS_CMAKE in
            macos) TARGET_OS_CMAKE="Darwin";;
            freebsd) TARGET_OS_CMAKE="FreeBSD";;
            windows) TARGET_OS_CMAKE="Windows";;
            linux) TARGET_OS_CMAKE="Linux";;
            native) TARGET_OS_CMAKE="";;
          esac
          echo TARGET_OS_CMAKE=${TARGET_OS_CMAKE} >> $GITHUB_ENV

      - name: Restore host LLVM and Zig
        id: cache-restore-host_zig
        uses: actions/cache/restore@v4
        with:
          path: |
            out
          key: build_zig-${{inputs.tag}}-host

      - name: Build host LLVM and Zig
        if: steps.cache-restore-host_zig.outputs.cache-hit != 'true'
        run: |
          # First build the libraries for Zig to link against, as well as native `llvm-tblgen`.
          mkdir -p "$ROOTDIR/out/build-llvm-host"
          cd "$ROOTDIR/out/build-llvm-host"
          cmake "$ROOTDIR/llvm" \
            -DCMAKE_INSTALL_PREFIX="$ROOTDIR/out/host" \
            -DCMAKE_PREFIX_PATH="$ROOTDIR/out/host" \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_PROJECTS="lld;clang" \
            -DLLVM_ENABLE_LIBXML2=OFF \
            -DLLVM_ENABLE_ZSTD=OFF \
            -DLLVM_INCLUDE_UTILS=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_DOCS=OFF \
            -DLLVM_ENABLE_BINDINGS=OFF \
            -DLLVM_ENABLE_OCAMLDOC=OFF \
            -DLLVM_ENABLE_Z3_SOLVER=OFF \
            -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF \
            -DLLVM_TOOL_LLVM_LTO_BUILD=OFF \
            -DLLVM_TOOL_LTO_BUILD=OFF \
            -DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF \
            -DCLANG_BUILD_TOOLS=OFF \
            -DCLANG_INCLUDE_DOCS=OFF \
            -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF \
            -DCLANG_TOOL_CLANG_LINKER_WRAPPER_BUILD=OFF \
            -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF \
            -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF \
            -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF \
            -DCLANG_TOOL_LIBCLANG_BUILD=OFF
          cmake --build . --target install

          # Now we build Zig, still with system C/C++ compiler, linking against LLVM,
          # Clang, LLD we just built from source.
          mkdir -p "$ROOTDIR/out/build-zig-host"
          cd "$ROOTDIR/out/build-zig-host"
          cmake "$ROOTDIR/zig" \
            -DCMAKE_INSTALL_PREFIX="$ROOTDIR/out/host" \
            -DCMAKE_PREFIX_PATH="$ROOTDIR/out/host" \
            -DCMAKE_BUILD_TYPE=Release \
            -DZIG_VERSION="$ZIG_VERSION"
          cmake --build . --target install

      - name: Cache host LLVM and Zig
        if: steps.cache-restore-host_zig.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            out
          key: ${{steps.cache-restore-host_zig.outputs.cache-primary-key}}

      - name: Restore target LLVM
        id: cache-restore-target_llvm
        uses: actions/cache/restore@v4
        with:
          path: |
            out
          key: build_zig-${{inputs.tag}}-target_llvm-${{matrix.target}}

      - name: Build target LLVM
        if: steps.cache-restore-target_llvm.outputs.cache-hit != 'true'
        run: |
          # Now we have Zig as a cross compiler.
          ZIG="$ROOTDIR/out/host/bin/zig"

          # First cross compile zlib for the target, as we need the LLVM linked into
          # the final zig binary to have zlib support enabled.
          mkdir -p "$ROOTDIR/out/build-zlib-$TARGET-$MCPU"
          cd "$ROOTDIR/out/build-zlib-$TARGET-$MCPU"
          cmake "$ROOTDIR/zlib" \
            -DCMAKE_INSTALL_PREFIX="$ROOTDIR/out/$TARGET-$MCPU" \
            -DCMAKE_PREFIX_PATH="$ROOTDIR/out/$TARGET-$MCPU" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CROSSCOMPILING=True \
            -DCMAKE_SYSTEM_NAME="${{env.TARGET_OS_CMAKE}}" \
            -DCMAKE_C_COMPILER="$ZIG;cc;-fno-sanitize=all;-s;-target;$TARGET;-mcpu=$MCPU" \
            -DCMAKE_CXX_COMPILER="$ZIG;c++;-fno-sanitize=all;-s;-target;$TARGET;-mcpu=$MCPU" \
            -DCMAKE_ASM_COMPILER="$ZIG;cc;-fno-sanitize=all;-s;-target;$TARGET;-mcpu=$MCPU" \
            -DCMAKE_RC_COMPILER="$ROOTDIR/out/host/bin/llvm-rc" \
            -DCMAKE_AR="$ROOTDIR/out/host/bin/llvm-ar" \
            -DCMAKE_RANLIB="$ROOTDIR/out/host/bin/llvm-ranlib"
          cmake --build . --target install

          # Same deal for zstd.
          # The build system for zstd is whack so I just put all the files here.
          mkdir -p "$ROOTDIR/out/$TARGET-$MCPU/lib"
          cp "$ROOTDIR/zstd/lib/zstd.h" "$ROOTDIR/out/$TARGET-$MCPU/include/zstd.h"
          cd "$ROOTDIR/out/$TARGET-$MCPU/lib"
          $ZIG build-lib \
            --name zstd \
            -target $TARGET \
            -mcpu=$MCPU \
            -fstrip -OReleaseFast \
            -lc \
            "$ROOTDIR/zstd/lib/decompress/zstd_ddict.c" \
            "$ROOTDIR/zstd/lib/decompress/zstd_decompress.c" \
            "$ROOTDIR/zstd/lib/decompress/huf_decompress.c" \
            "$ROOTDIR/zstd/lib/decompress/huf_decompress_amd64.S" \
            "$ROOTDIR/zstd/lib/decompress/zstd_decompress_block.c" \
            "$ROOTDIR/zstd/lib/compress/zstdmt_compress.c" \
            "$ROOTDIR/zstd/lib/compress/zstd_opt.c" \
            "$ROOTDIR/zstd/lib/compress/hist.c" \
            "$ROOTDIR/zstd/lib/compress/zstd_ldm.c" \
            "$ROOTDIR/zstd/lib/compress/zstd_fast.c" \
            "$ROOTDIR/zstd/lib/compress/zstd_compress_literals.c" \
            "$ROOTDIR/zstd/lib/compress/zstd_double_fast.c" \
            "$ROOTDIR/zstd/lib/compress/huf_compress.c" \
            "$ROOTDIR/zstd/lib/compress/fse_compress.c" \
            "$ROOTDIR/zstd/lib/compress/zstd_lazy.c" \
            "$ROOTDIR/zstd/lib/compress/zstd_compress.c" \
            "$ROOTDIR/zstd/lib/compress/zstd_compress_sequences.c" \
            "$ROOTDIR/zstd/lib/compress/zstd_compress_superblock.c" \
            "$ROOTDIR/zstd/lib/deprecated/zbuff_compress.c" \
            "$ROOTDIR/zstd/lib/deprecated/zbuff_decompress.c" \
            "$ROOTDIR/zstd/lib/deprecated/zbuff_common.c" \
            "$ROOTDIR/zstd/lib/common/entropy_common.c" \
            "$ROOTDIR/zstd/lib/common/pool.c" \
            "$ROOTDIR/zstd/lib/common/threading.c" \
            "$ROOTDIR/zstd/lib/common/zstd_common.c" \
            "$ROOTDIR/zstd/lib/common/xxhash.c" \
            "$ROOTDIR/zstd/lib/common/debug.c" \
            "$ROOTDIR/zstd/lib/common/fse_decompress.c" \
            "$ROOTDIR/zstd/lib/common/error_private.c" \
            "$ROOTDIR/zstd/lib/dictBuilder/zdict.c" \
            "$ROOTDIR/zstd/lib/dictBuilder/divsufsort.c" \
            "$ROOTDIR/zstd/lib/dictBuilder/fastcover.c" \
            "$ROOTDIR/zstd/lib/dictBuilder/cover.c"

          # Rebuild LLVM with Zig.
          mkdir -p "$ROOTDIR/out/build-llvm-$TARGET-$MCPU"
          cd "$ROOTDIR/out/build-llvm-$TARGET-$MCPU"
          cmake "$ROOTDIR/llvm" \
            -DCMAKE_INSTALL_PREFIX="$ROOTDIR/out/$TARGET-$MCPU" \
            -DCMAKE_PREFIX_PATH="$ROOTDIR/out/$TARGET-$MCPU" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CROSSCOMPILING=True \
            -DCMAKE_SYSTEM_NAME="${{env.TARGET_OS_CMAKE}}" \
            -DCMAKE_C_COMPILER="$ZIG;cc;-fno-sanitize=all;-s;-target;$TARGET;-mcpu=$MCPU" \
            -DCMAKE_CXX_COMPILER="$ZIG;c++;-fno-sanitize=all;-s;-target;$TARGET;-mcpu=$MCPU" \
            -DCMAKE_ASM_COMPILER="$ZIG;cc;-fno-sanitize=all;-s;-target;$TARGET;-mcpu=$MCPU" \
            -DCMAKE_RC_COMPILER="$ROOTDIR/out/host/bin/llvm-rc" \
            -DCMAKE_AR="$ROOTDIR/out/host/bin/llvm-ar" \
            -DCMAKE_RANLIB="$ROOTDIR/out/host/bin/llvm-ranlib" \
            -DLLVM_ENABLE_BACKTRACES=OFF \
            -DLLVM_ENABLE_BINDINGS=OFF \
            -DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
            -DLLVM_ENABLE_LIBEDIT=OFF \
            -DLLVM_ENABLE_LIBPFM=OFF \
            -DLLVM_ENABLE_LIBXML2=OFF \
            -DLLVM_ENABLE_OCAMLDOC=OFF \
            -DLLVM_ENABLE_PLUGINS=OFF \
            -DLLVM_ENABLE_PROJECTS="lld;clang" \
            -DLLVM_ENABLE_TERMINFO=OFF \
            -DLLVM_ENABLE_Z3_SOLVER=OFF \
            -DLLVM_ENABLE_ZLIB=FORCE_ON \
            -DLLVM_ENABLE_ZSTD=FORCE_ON \
            -DLLVM_USE_STATIC_ZSTD=ON \
            -DLLVM_TABLEGEN="$ROOTDIR/out/host/bin/llvm-tblgen" \
            -DLLVM_BUILD_UTILS=OFF \
            -DLLVM_BUILD_TOOLS=OFF \
            -DLLVM_BUILD_STATIC=ON \
            -DLLVM_INCLUDE_UTILS=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_DOCS=OFF \
            -DLLVM_DEFAULT_TARGET_TRIPLE="$TARGET" \
            -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF \
            -DLLVM_TOOL_LLVM_LTO_BUILD=OFF \
            -DLLVM_TOOL_LTO_BUILD=OFF \
            -DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF \
            -DCLANG_TABLEGEN="$ROOTDIR/out/build-llvm-host/bin/clang-tblgen" \
            -DCLANG_BUILD_TOOLS=OFF \
            -DCLANG_INCLUDE_DOCS=OFF \
            -DCLANG_INCLUDE_TESTS=OFF \
            -DCLANG_ENABLE_ARCMT=ON \
            -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF \
            -DCLANG_TOOL_CLANG_LINKER_WRAPPER_BUILD=OFF \
            -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF \
            -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF \
            -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF \
            -DCLANG_TOOL_LIBCLANG_BUILD=OFF \
            -DLIBCLANG_BUILD_STATIC=ON \
            -DLLD_BUILD_TOOLS=OFF
          cmake --build . --target install

      - name: Cache target LLVM
        if: steps.cache-restore-target_llvm.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            out
          key: ${{steps.cache-restore-target_llvm.outputs.cache-primary-key}}

      - name: Clone zig
        run: |
          rm -rf zig
          git clone https://github.com/ziglang/zig.git --branch=${{inputs.tag}}
          ## https://github.com/termux/termux-packages/issues/20783

          ## Revert breaking commit
          cd zig
          git config user.email user@email.com
          git config user.name user
          # git revert a0de077600a35e41ce861398eaf3c8e832fee42e
          git reset --hard 77abd3a96
      - name: Build target zig
        run: |
          ZIG="$ROOTDIR/out/host/bin/zig"
          # Finally, we can cross compile Zig itself, with Zig.
          cd "$ROOTDIR/zig"
          $ZIG build \
            --prefix "$ROOTDIR/out/zig-$TARGET-$MCPU" \
            --search-prefix "$ROOTDIR/out/$TARGET-$MCPU" \
            -Dflat \
            -Dstatic-llvm \
            -Doptimize=ReleaseFast \
            -Dstrip \
            -Dtarget="$TARGET" \
            -Dcpu="$MCPU" \
            -Dversion-string="$ZIG_VERSION"

      - name: Create tarball
        run: tar -C out -c zig-${{matrix.target}}-baseline | xz -T0 > zig-${{matrix.target}}.tar.xz

      - name: Upload ${{matrix.target}} tarball
        uses: actions/upload-artifact@v4
        with:
          name: zig-${{matrix.target}}.tar.xz
          path: zig-${{matrix.target}}.tar.xz

      - name: Upload release
        uses: ncipollo/release-action@v1.14.0
        with:
          tag: "test"
          artifacts: zig-${{matrix.target}}.tar.xz
          allowUpdates: true
          replacesArtifacts: true
          body: |
            [action](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})
