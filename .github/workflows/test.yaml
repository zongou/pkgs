name: Test
run-name: "Test: ${{github.event.head_commit.message}}"
on:
  workflow_dispatch:
  push:
    paths: .github/workflows/test.yaml

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ["aarch64-linux-musl"]

    steps:
      - name: Checkout llvm-project
        uses: actions/checkout@v4.1.1
        with:
          repository: llvm/llvm-project
          ref: llvmorg-18.1.8
          fetch-depth: 1

      # - name: Prepare environment
      #   run: |
      #     cat <<EOF >d
      #     export CHARSET=\${CHARSET:-UTF-8}
      #     export LANG=\${LANG:-C.UTF-8}
      #     export LC_COLLATE=\${LC_COLLATE:-C}
      #     export TERM=xterm-256color
      #     export COLORTERM=truecolor
      #     EOF

      #     sudo mv d /etc/profile.d/my_profile.sh

      #     sudo apt update

      #     helix_vesion=24.07
      #     helix_url=https://github.com/helix-editor/helix/releases/download/${helix_vesion}/helix-${helix_vesion}-x86_64-linux.tar.xz
      #     curl -L ${helix_url} | xz -d | tar -C /opt -x
      #     ln -snf /opt/helix-${helix_vesion}-x86_64-linux/hx /usr/local/bin/hx
      #     hx --version

      #     dufs_version=0.41.0
      #     dufs_url=https://github.com/sigoden/dufs/releases/download/v0.41.0/dufs-v0.41.0-x86_64-unknown-linux-musl.tar.gz
      #     curl -L ${dufs_url} | gzip -d | tar -C /usr/local/bin -x
      #     dufs --version

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2.2.0
        with:
          version: 0.13.0
          cache: true

      - name: Build host
        env:
          BUILD_DIR: ${{github.workspace}}/build
          OUTPUT_DIR: ${{github.workspace}}/output
          TARGET: ${{matrix.target}}
          MCPU: baseline
          ROOTDIR: ${{github.workspace}}
          HOST_BUILD_DIR: ${{github.workspace}}/build/host
          TARGET_BUILD_DIR: ${{github.workspace}}/build/${{matrix.target}}
          TARGET_INSTALL_DIR: ${{github.workspace}}/output/${{matrix.target}}
        run: |
          sudo apt install ninja-build

          ## error: unsupported linker arg: -Bsymbolic-functions
          ## https://github.com/ziglang/zig/issues/18804
          ## https://github.com/ziglang/zig-bootstrap/commit/451966c163c7a2e9769d62fd77585af1bc9aca4b
          # sed -i "s/add_clang_subdirectory(clang-shlib)/#/" clang/tools/CMakeLists.txt
          base64 -d <<-EOF | patch -up1
            ZGlmZiAtLWdpdCBhL2NsYW5nL3Rvb2xzL0NNYWtlTGlzdHMudHh0IGIvY2xhbmcvdG9vbHMvQ01h
            a2VMaXN0cy50eHQKaW5kZXggZjYwZGI2ZWYwYi4uNTc2OWU4NTQ1MiAxMDA2NDQKLS0tIGEvY2xh
            bmcvdG9vbHMvQ01ha2VMaXN0cy50eHQKKysrIGIvY2xhbmcvdG9vbHMvQ01ha2VMaXN0cy50eHQK
            QEAgLTIwLDExICsyMCw2IEBAIGFkZF9jbGFuZ19zdWJkaXJlY3RvcnkoYy1pbmRleC10ZXN0KQog
            CiBhZGRfY2xhbmdfc3ViZGlyZWN0b3J5KGNsYW5nLXJlbmFtZSkKIGFkZF9jbGFuZ19zdWJkaXJl
            Y3RvcnkoY2xhbmctcmVmYWN0b3IpCi0jIEZvciBNaW5HVyB3ZSBvbmx5IGVuYWJsZSBzaGFyZWQg
            bGlicmFyeSBpZiBMTFZNX0xJTktfTExWTV9EWUxJQj1PTi4KLSMgV2l0aG91dCB0aGF0IG9wdGlv
            biByZXN1bHRpbmcgbGlicmFyeSBpcyB0b28gY2xvc2UgdG8gMl4xNiBETEwgZXhwb3J0cyBsaW1p
            dC4KLWlmKFVOSVggT1IgKE1JTkdXIEFORCBMTFZNX0xJTktfTExWTV9EWUxJQikpCi0gIGFkZF9j
            bGFuZ19zdWJkaXJlY3RvcnkoY2xhbmctc2hsaWIpCi1lbmRpZigpCiAKIGlmKENMQU5HX0VOQUJM
            RV9BUkNNVCkKICAgYWRkX2NsYW5nX3N1YmRpcmVjdG9yeShhcmNtdC10ZXN0KQ==
          EOF
          # cat clang/tools/CMakeLists.txt

          # Build dependencies
          if ! test -f "${TARGET_INSTALL_DIR}"/lib/libz.a; then
            if ! test -d zlib; then
              zlib_version=1.3.1
              curl https://github.com/madler/zlib/releases/download/v${zlib_version}/zlib-${zlib_version}.tar.xz -LkSs | xz -d | tar -x
              mv zlib-${zlib_version} zlib
            fi
            mkdir -p "${TARGET_BUILD_DIR}"/zlib
            cmake -S "$ROOTDIR/zlib" -B "${TARGET_BUILD_DIR}"/zlib \
              -DCMAKE_INSTALL_PREFIX="${TARGET_INSTALL_DIR}" \
              -DCMAKE_PREFIX_PATH="${TARGET_INSTALL_DIR}" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_CROSSCOMPILING=True \
              -DCMAKE_SYSTEM_NAME="$TARGET_OS_CMAKE" \
              -DCMAKE_C_COMPILER="zig;cc;-fno-sanitize=all;-s;-static;-target;$TARGET;-mcpu=$MCPU" \
              -DCMAKE_CXX_COMPILER="zig;c++;-fno-sanitize=all;-s;-static;-target;$TARGET;-mcpu=$MCPU" \
              -DCMAKE_ASM_COMPILER="zig;cc;-fno-sanitize=all;-s;-static;-target;$TARGET;-mcpu=$MCPU"

            cmake --build "${TARGET_BUILD_DIR}"/zlib --target install
          fi

          if ! test -f "${TARGET_INSTALL_DIR}"/lib/libzstd.a; then
            if ! test -d zstd; then
              curl https://github.com/facebook/zstd/archive/refs/tags/v1.5.6.tar.gz -LkSs | gzip -d | tar -x
              mv zstd-1.5.6 zstd
            fi
            cp "$ROOTDIR/zstd/lib/zstd.h" "${TARGET_INSTALL_DIR}/include/zstd.h"
            cd "${TARGET_INSTALL_DIR}/lib"
            zig build-lib \
              --name zstd \
              -target "$TARGET" \
              -mcpu="$MCPU" \
              -fstrip -OReleaseFast \
              -lc \
              "$ROOTDIR/zstd/lib/decompress/zstd_ddict.c" \
              "$ROOTDIR/zstd/lib/decompress/zstd_decompress.c" \
              "$ROOTDIR/zstd/lib/decompress/huf_decompress.c" \
              "$ROOTDIR/zstd/lib/decompress/huf_decompress_amd64.S" \
              "$ROOTDIR/zstd/lib/decompress/zstd_decompress_block.c" \
              "$ROOTDIR/zstd/lib/compress/zstdmt_compress.c" \
              "$ROOTDIR/zstd/lib/compress/zstd_opt.c" \
              "$ROOTDIR/zstd/lib/compress/hist.c" \
              "$ROOTDIR/zstd/lib/compress/zstd_ldm.c" \
              "$ROOTDIR/zstd/lib/compress/zstd_fast.c" \
              "$ROOTDIR/zstd/lib/compress/zstd_compress_literals.c" \
              "$ROOTDIR/zstd/lib/compress/zstd_double_fast.c" \
              "$ROOTDIR/zstd/lib/compress/huf_compress.c" \
              "$ROOTDIR/zstd/lib/compress/fse_compress.c" \
              "$ROOTDIR/zstd/lib/compress/zstd_lazy.c" \
              "$ROOTDIR/zstd/lib/compress/zstd_compress.c" \
              "$ROOTDIR/zstd/lib/compress/zstd_compress_sequences.c" \
              "$ROOTDIR/zstd/lib/compress/zstd_compress_superblock.c" \
              "$ROOTDIR/zstd/lib/deprecated/zbuff_compress.c" \
              "$ROOTDIR/zstd/lib/deprecated/zbuff_decompress.c" \
              "$ROOTDIR/zstd/lib/deprecated/zbuff_common.c" \
              "$ROOTDIR/zstd/lib/common/entropy_common.c" \
              "$ROOTDIR/zstd/lib/common/pool.c" \
              "$ROOTDIR/zstd/lib/common/threading.c" \
              "$ROOTDIR/zstd/lib/common/zstd_common.c" \
              "$ROOTDIR/zstd/lib/common/xxhash.c" \
              "$ROOTDIR/zstd/lib/common/debug.c" \
              "$ROOTDIR/zstd/lib/common/fse_decompress.c" \
              "$ROOTDIR/zstd/lib/common/error_private.c" \
              "$ROOTDIR/zstd/lib/dictBuilder/zdict.c" \
              "$ROOTDIR/zstd/lib/dictBuilder/divsufsort.c" \
              "$ROOTDIR/zstd/lib/dictBuilder/fastcover.c" \
              "$ROOTDIR/zstd/lib/dictBuilder/cover.c"
          fi

          cd "$ROOTDIR"

          # # Build host llvm
          # if ! test -f "${HOST_BUILD_DIR}"/llvm/bin/clang-tblgen; then
          # 	mkdir -p "${HOST_BUILD_DIR}/llvm"
          # 	cmake -S "$ROOTDIR/llvm" -B "${HOST_BUILD_DIR}/llvm" \
          # 		-DCMAKE_INSTALL_PREFIX="${HOST_BUILD_DIR}" \
          # 		-DCMAKE_PREFIX_PATH="${HOST_INSTALL_DIR}" \
          # 		-DCMAKE_BUILD_TYPE=Release \
          # 		-DLLVM_ENABLE_PROJECTS="lld;clang" \
          # 		-DLLVM_ENABLE_LIBXML2=OFF \
          # 		-DLLVM_ENABLE_ZSTD=OFF \
          # 		-DLLVM_INCLUDE_UTILS=OFF \
          # 		-DLLVM_INCLUDE_TESTS=OFF \
          # 		-DLLVM_INCLUDE_EXAMPLES=OFF \
          # 		-DLLVM_INCLUDE_BENCHMARKS=OFF \
          # 		-DLLVM_INCLUDE_DOCS=OFF \
          # 		-DLLVM_ENABLE_BINDINGS=OFF \
          # 		-DLLVM_ENABLE_OCAMLDOC=OFF \
          # 		-DLLVM_ENABLE_Z3_SOLVER=OFF \
          # 		-DLLVM_TOOL_LLVM_LTO2_BUILD=OFF \
          # 		-DLLVM_TOOL_LLVM_LTO_BUILD=OFF \
          # 		-DLLVM_TOOL_LTO_BUILD=OFF \
          # 		-DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF \
          # 		-DCLANG_BUILD_TOOLS=OFF \
          # 		-DCLANG_INCLUDE_DOCS=OFF \
          # 		-DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF \
          # 		-DCLANG_TOOL_CLANG_LINKER_WRAPPER_BUILD=OFF \
          # 		-DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF \
          # 		-DCLANG_TOOL_ARCMT_TEST_BUILD=OFF \
          # 		-DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF \
          # 		-DCLANG_TOOL_LIBCLANG_BUILD=OFF
          # 	cmake --build "${HOST_BUILD_DIR}/llvm" --target llvm-tblgen clang-tblgen
          # fi

          cmake -S llvm -B "${TARGET_BUILD_DIR}/llvm" \
            -G Ninja \
            -DCMAKE_INSTALL_PREFIX="${TARGET_INSTALL_DIR}/llvm" \
            -DCMAKE_PREFIX_PATH="${TARGET_INSTALL_DIR}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CROSSCOMPILING=True \
            -DCMAKE_SYSTEM_NAME="$TARGET_OS_CMAKE" \
            -DCMAKE_C_COMPILER="zig;cc;-fno-sanitize=all;-s;-target;$TARGET;-mcpu=$MCPU" \
            -DCMAKE_CXX_COMPILER="zig;c++;-fno-sanitize=all;-s;-target;$TARGET;-mcpu=$MCPU" \
            -DCMAKE_ASM_COMPILER="zig;cc;-fno-sanitize=all;-s;-target;$TARGET;-mcpu=$MCPU" \
            -DLLVM_ENABLE_PROJECTS="lld;clang" \
            -DLLVM_ENABLE_ZLIB=FORCE_ON \
            -DLLVM_ENABLE_ZSTD=FORCE_ON \
            -DLLVM_USE_STATIC_ZSTD=ON \
            -DLLVM_BUILD_STATIC=ON \
            -DCLANG_ENABLE_ARCMT=ON \
            -DLIBCLANG_BUILD_STATIC=ON \
            -DCMAKE_SKIP_INSTALL_RPATH=TRUE

          cmake --build "${TARGET_BUILD_DIR}"/llvm --target install
          file build/aarch64-linux-musl/llvm/bin/*

    